// lib/background/background_task.dart

import 'dart:async';
import 'package:flutter/widgets.dart';
import 'package:flutter_background_service/flutter_background_service.dart';
import 'package:logger/logger.dart';
import 'package:firebase_core/firebase_core.dart';

import '../services/session_sync_service.dart';
import '../services/ble_service.dart';
import '../services/network_discovery_service.dart';
import '../firebase_options.dart'; // Generated by FlutterFire CLI

@pragma('vm:entry-point')
Future<void> onStart(ServiceInstance service) async {
  // Initialize Flutter and Firebase in this isolate
  WidgetsFlutterBinding.ensureInitialized();
  if (Firebase.apps.isEmpty) {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  }

  Logger.level = Level.debug;
  final log = Logger();

  // Start BLE scan with UDP fallback
  final ble = BleService(
    onPeerFound: (peer) => log.i('Background BLE found: ${peer.displayName}'),
    onError: (_) {
      log.w('BLE error, switching to UDP fallback');
      NetworkDiscoveryService(onPeerFound: (peer) {
        log.i('Background UDP found: ${peer.displayName}');
      }).start();
    },
  );
  ble.startScan();

  // Sync sessions every 15 minutes
  final syncService = SessionSyncService();
  Timer.periodic(const Duration(minutes: 15), (_) {
    log.i('Background sync triggered');
    syncService.syncAll();
  });

  // Handle stop command
  service.on('stopService').listen((_) {
    log.i('Background service stopping');
    service.stopSelf();
  });
}
